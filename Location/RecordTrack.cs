using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Linq;
using System.Text;
using SharpGPX;
using SharpGPX.GPX1_0;
using SharpGPX.GPX1_1;
using Xamarin.Essentials;
using hajk.Data;
using System.Threading;
using Serilog;
using Mapsui.Layers;
using hajk.Models;
using hajk.Fragments;
using GPXUtils;
using Mapsui.Geometries;
using Mapsui.Projection;

namespace hajk
{
    class RecordTrack
    {
        public static GpxClass trackGpx = new GpxClass();
        private static Timer Order_Timer;

        public static void StartTrackTimer()
        {
            Preferences.Set("RecordingTrack", true);
            //This is plain stupid. Why not Int type in preferences
            int freq_s = Int32.Parse(Preferences.Get("freq", PrefsActivity.freq_s.ToString()));

            /**///Move to a proper thread?
            Order_Timer = new Timer(new TimerCallback(GetGPSLocationEvent), null, 0, freq_s * 1000);

            //Update location marker with correct colour
            Location.UpdateLocationMarker(false);

            //Enable the menu item
            AndroidX.AppCompat.Widget.Toolbar toolbar = MainActivity.mContext.FindViewById<AndroidX.AppCompat.Widget.Toolbar>(Resource.Id.toolbar);
            toolbar.Menu.FindItem(Resource.Id.action_clearmap).SetEnabled(true);
        }

        public static async void SaveTrack()
        {
            //Stop the timer
            Order_Timer.Dispose();

            //Update status
            Preferences.Set("RecordingTrack", false);

            //Update location marker with correct colour
            Location.UpdateLocationMarker(false);

            Show_Dialog msg1 = new Show_Dialog(MainActivity.mContext);
            if (await msg1.ShowDialog($"Track", $"Save Track ?", Android.Resource.Attribute.DialogIcon, true, Show_Dialog.MessageResult.YES, Show_Dialog.MessageResult.NO) == Show_Dialog.MessageResult.NO)
            {
                return;
            }

            string name = DateTime.Now.ToString("dd/MM/yyyy HH:mm");
            GpxClass track = new GpxClass()
            {
                Metadata = new metadataType()
                {
                    author = new personType("hajk"),
                    name = name, /**///This should reflect the name of the route we're following, or a user selected name
                    desc = "Track generated by hajk",
                },
            };

            track.Tracks.Add(new trkType()
            {
                name = name,
                trkseg = new trksegTypeCollection().AddItem(
                    new trksegType()
                    {
                        trkpt = trackGpx.Waypoints
                    })
            });
            track.Metadata.bounds = track.GetBounds();

            //Calculate Distance
            float mapDistanceKm = 0.0f;
            var p = new PositionHandler();
            for (int j = 1; j < track.Tracks[0].trkseg.Count; j++)
            {
                var p1 = new Position((float)track.Tracks[0].trkseg[0].trkpt[j - 1].lat, (float)track.Tracks[0].trkseg[0].trkpt[j - 1].lon);
                var p2 = new Position((float)track.Tracks[0].trkseg[0].trkpt[j].lat, (float)track.Tracks[0].trkseg[0].trkpt[j].lon);
                mapDistanceKm += (float)p.CalculateDistance(p1, p2, DistanceType.Kilometers);
            }

            //Add to routetrack DB
            GPXDataRouteTrack r = new GPXDataRouteTrack
            {
                GPXType = GPXType.Track,
                Name = name,
                Distance = mapDistanceKm,
                Ascent = 0, /**///Fix this
                Descent = 0, /**///Fix this
                Description = "Track generated by hajk",
                GPX = track.ToXml(),
            };
            RouteDatabase.SaveRouteAsync(r).Wait();

            //Update RecycleView with new entry
            int i = Fragment_gpx.mAdapter.mGpxData.Add(r);
            Fragment_gpx.mAdapter.NotifyItemInserted(i);
        }

        private static void GetGPSLocationEvent(object state)
        {
            var location = Geolocation.GetLastKnownLocationAsync().Result;
            Log.Information($"Updated GPS Location - {location.Timestamp} - Altitude: {location.Altitude}, Lat: {location.Latitude}, Lon: {location.Longitude}, Speed: {location.Speed}");

            wptType waypoint = new wptType()
            {
                lat = (decimal)location.Latitude,
                lon = (decimal)location.Longitude,
                ele = (decimal)location.Altitude,
                time = DateTime.Now,
                timeSpecified = true,
            };

            trackGpx.Waypoints.Add(waypoint);
            Log.Information($"Got {trackGpx.Waypoints.Count} waypoints");

            if (Preferences.Get("DrawTrackOnGui", PrefsActivity.DrawTrackOnGui_b))
            {
                //Add tracking layer to map
                ILayer layer = Fragment_map.map.Layers.FindLayer("TrackLayer").FirstOrDefault();
                if (layer == null && Location.location != null) {
                    ILayer lineStringLayer = Import.CreateTrackLayer($"LINESTRING({location.Latitude} {location.Longitude})", Import.CreateTrackStyle());
                    lineStringLayer.Tag = "tracklayer";
                    Fragment_map.map.Layers.Add(lineStringLayer);
                    layer = Fragment_map.map.Layers.FindLayer("TrackLayer").FirstOrDefault();
                }

                //Update feature on layer
                var feature = layer.GetFeaturesInView(Fragment_map.map.Envelope, 99).FirstOrDefault();
                if (feature != null)
                {
                    var lineString = new LineString(trackGpx.Waypoints.Select(v => SphericalMercator.FromLonLat((double)v.lon, (double)v.lat)));
                    feature.Geometry = lineString;
                    layer.DataHasChanged();
                }
            }
        }
    }
}
