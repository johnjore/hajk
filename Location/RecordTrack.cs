using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Linq;
using System.Text;
using SharpGPX;
using SharpGPX.GPX1_0;
using SharpGPX.GPX1_1;
using Xamarin.Essentials;
using hajk.Data;
using System.Threading;
using Serilog;
using Mapsui.Layers;

namespace hajk
{
    class RecordTrack
    {
        public static GpxClass trackGpx = new GpxClass();
        private static Timer Order_Timer;

        public static void StartTrackTimer()
        {
            Preferences.Set("RecordingTrack", true);
            //This is plain stupid. Why not Int type in preferences
            int freq_s = Int32.Parse(Preferences.Get("freq", PrefsActivity.freq_s.ToString()));

            /**///Move to a proper thread?
            Order_Timer = new Timer(new TimerCallback(GetGPSLocationEvent), null, 0, freq_s * 1000);

            //Update location marker with correct colour
            Location.UpdateLocationMarker(false);
        }

        public static void SaveTrack()
        {
            Order_Timer.Dispose();

            string name = DateTime.Now.ToString("dd/MM/yyyy HH:mm");

            GpxClass track = new GpxClass()
            {
                Metadata = new metadataType()
                {
                    author = new personType("hajk"),
                    link = new linkTypeCollection().AddLink(new linkType("https://www.github.com/johnjore/hajk", "John's software")),
                    /**///This should reflect the name of the route we're following, or a user selected name
                    name = name,
                    desc = "Track generated by hajk",
                    copyright = new copyrightType("hajk", "2021"),
                },
            };

            track.Tracks.Add(new trkType()
            {
                name = name,
                trkseg = new trksegTypeCollection().AddItem(
                    new trksegType()
                    {
                        trkpt = trackGpx.Waypoints
                    })
            });

            track.Metadata.bounds = track.GetBounds();

            /**///This should be saved to the sqlite DB for analysis and export
            string trackPath = Path.Combine(MainActivity.rootPath, DateTime.Now.ToString("yyyy-MM-dd HH-mm") + ".gpx");
            track.ToFile(trackPath);

            Preferences.Set("RecordingTrack", false);

            //Update location marker with correct colour
            Location.UpdateLocationMarker(false);
        }

        private static void GetGPSLocationEvent(object state)
        {
            var location = Geolocation.GetLastKnownLocationAsync().Result;
            Log.Information($"Updated GPS Location - {location.Timestamp} - Altitude: {location.Altitude}, Lat: {location.Latitude}, Lon: {location.Longitude}, Speed: {location.Speed}");

            wptType waypoint = new wptType()
            {
                lat = (decimal)location.Latitude,
                lon = (decimal)location.Longitude,
                ele = (decimal)location.Altitude,
                time = DateTime.Now,
                timeSpecified = true,
            };

            trackGpx.Waypoints.Add(waypoint);

            Log.Information($"Got {trackGpx.Waypoints.Count} waypoints");

            if (Preferences.Get("DrawTrackOnGui", PrefsActivity.DrawTrackOnGui_b))
                DrawTrackOnGui();
        }

        private static void DrawTrackOnGui()
        {
            /**///There must be a better way to update the track than delete and re-create the layer. Can't we just append additional waypoints to the linestring

            string mapTrack = "LINESTRING(";

            //WayPoint
            for (int i = 0; i < trackGpx.Waypoints.Count; i++)
            {
                if (!(mapTrack.Equals("LINESTRING(")))
                {
                    mapTrack += ",";
                }
                mapTrack += trackGpx.Waypoints[i].lat.ToString() + " " + trackGpx.Waypoints[i].lon.ToString();
            }
            mapTrack += ")";

            //Add to map as a layer
            ILayer lineStringLayer = Import.CreateTrackLayer(mapTrack, Import.CreateTrackStyle());
            foreach (ILayer layer in MainActivity.map.Layers.FindLayer("TrackLayer"))
            {
                MainActivity.map.Layers.Remove(layer);
            }
            MainActivity.map.Layers.Add(lineStringLayer);

            Log.Information($"Got {MainActivity.map.Layers.Count} layers");
        }
    }
}
